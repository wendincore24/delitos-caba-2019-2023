# Verificar si la tabla existe en el entorno
if (!exists(nombre_tabla_delitos)) {
warning(paste0("La tabla '", nombre_tabla_delitos, "' no se encontró en el entorno. Saltando este año."))
next
}
# Obtener el data frame de delitos para el año actual
delitos_año_actual <- get(nombre_tabla_delitos)
# --- Generar resumen por 'momento_dia' para el año actual ---
resumen_momento_dia <- delitos_año_actual %>%
group_by(momento_dia) %>%
summarise(
conteo_delitos = n()
) %>%
mutate(
año = año_actual # Añadir la columna de año para combinar después
) %>%
ungroup()
listado_delitos_momento_dia[[as.character(año_actual)]] <- resumen_momento_dia
# --- Generar resumen por 'tipo' de delito para el año actual ---
resumen_tipo_delito <- delitos_año_actual %>%
group_by(tipo) %>%
summarise(
conteo_delitos = n()
) %>%
mutate(
año = año_actual # Añadir la columna de año
) %>%
ungroup()
listado_delitos_tipo[[as.character(año_actual)]] <- resumen_tipo_delito
}
# --- 5. Combinar los resúmenes de todos los años en una sola tabla ---
tabla_delitos_por_momento_dia <- bind_rows(listado_delitos_momento_dia) %>%
select(año, momento_dia, conteo_delitos) %>%
arrange(año, momento_dia)
tabla_delitos_por_tipo <- bind_rows(listado_delitos_tipo) %>%
select(año, tipo, conteo_delitos) %>%
arrange(año, tipo)
cat("\n¡Generación de tablas resumen intermedias completada!\n")
---
## Gráfico 1: Distribución Porcentual de Delitos por Momento del Día
# --- 1. Preparar los Datos para el Gráfico con Porcentajes ---
# Eliminar NA's y pivotar para el formato ancho primero
tabla_delitos_por_momento_dia_limpia <- tabla_delitos_por_momento_dia %>%
filter(!is.na(momento_dia)) %>%
pivot_wider(
names_from = año,
values_from = conteo_delitos,
values_fill = 0
) %>%
mutate(
momento_dia = factor(momento_dia, levels = c("MADRUGADA", "MAÑANA", "TARDE", "NOCHE"))
) %>%
arrange(momento_dia)
# --- 1. Cargar Librerías Necesarias ---
library(ggplot2)
library(tidyr) # Para pivot_longer
library(dplyr) # Para manipulación de datos
# --- 2. Preparar los Datos para el Gráfico ---
# 'tabla_final_pivotada_tipo' está en formato "ancho".
# Vamos a transformarla a formato "largo" para ggplot2.
tabla_grafico_tipo_largo <- tabla_final_pivotada_tipo %>%
pivot_longer(
cols = -tipo, # Selecciona todas las columnas excepto 'tipo'
names_to = "año",    # Los nombres de las columnas pivotadas (los años) irán a la nueva columna 'año'
values_to = "conteo_delitos" # Los valores (los conteos) irán a la nueva columna 'conteo_delitos'
) %>%
mutate(
año = as.numeric(as.character(año)) # Convertir el año de nuevo a numérico para el eje X
)
# --- 3. Crear el Gráfico de Líneas ---
p_delitos_por_tipo_lineas <- ggplot(tabla_grafico_tipo_largo, aes(x = año, y = conteo_delitos, color = tipo, group = tipo)) +
geom_line(linewidth = 1) + # Dibuja las líneas
geom_point(size = 2) +     # Añade puntos en cada año para mayor claridad
labs(
title = "Evolución Anual de Delitos por Tipo en CABA (2019-2023)",
x = "Año",
y = "Número de Delitos",
color = "Tipo de Delito",
caption = "Fuente: Datos de Delitos CABA"
) +
scale_x_continuous(breaks = unique(tabla_grafico_tipo_largo$año)) + # Asegura que se muestren todos los años en el eje X
scale_y_continuous(labels = scales::comma) + # Formatea el eje Y con comas para miles
scale_color_manual(values = c(
"Homicidios" = "#d95f02", # Naranja quemado
"Hurto" = "#7570b3",      # Púrpura suave
"Lesiones" = "#e7298a",   # Rosa oscuro
"Robo" = "#66a61e"        # Verde lima
)) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 11, face = "bold"),
legend.position = "right"
)
# Mostrar el gráfico
print(p_delitos_por_tipo_lineas)
# --- 4. Opcional: Guardar el Gráfico ---
# ggsave("grafico_evolucion_delitos_tipo.png", plot = p_delitos_por_tipo_lineas, width = 12, height = 7, dpi = 300)
# cat("\nGráfico guardado como 'grafico_evolucion_delitos_tipo.png'.\n")
# --- 1. Cargar Librerías Necesarias ---
library(ggplot2)
library(dplyr) # Para filtrar
# --- 2. Preparar los Datos para el Gráfico de Homicidios ---
# Filtrar solo los datos de Homicidios de la tabla larga ya generada
# (tabla_grafico_tipo_largo del código anterior).
# Si no tienes tabla_grafico_tipo_largo cargada, ejecuta primero el bloque "Preparar los Datos para el Gráfico" del mensaje anterior.
homicidios_para_grafico <- tabla_grafico_tipo_largo %>%
filter(tipo == "Homicidios")
# --- 3. Crear el Gráfico de Líneas Solo para Homicidios ---
p_homicidios_solo <- ggplot(homicidios_para_grafico, aes(x = año, y = conteo_delitos)) +
geom_line(color = "#d95f02", linewidth = 1.2) + # Color naranja quemado para Homicidios
geom_point(color = "#d95f02", size = 3) +       # Puntos más grandes para resaltar
geom_text(aes(label = conteo_delitos), vjust = -1, hjust = 0.5, size = 4, color = "#d95f02") + # Etiquetas con los valores exactos
labs(
title = "Evolución Anual de Homicidios en CABA (2019-2023)",
subtitle = "Foco en delitos de menor volumen",
x = "Año",
y = "Número de Homicidios",
caption = "Fuente: Datos de Delitos CABA"
) +
scale_x_continuous(breaks = unique(homicidios_para_grafico$año)) + # Asegura todos los años
scale_y_continuous(limits = c(0, max(homicidios_para_grafico$conteo_delitos) * 1.2), # Ajusta el límite Y para dejar espacio para etiquetas
labels = scales::comma) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 12, color = "gray30"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.position = "none" # No necesitamos leyenda si es un solo tipo
)
# Mostrar el gráfico
print(p_homicidios_solo)
# --- 4. Opcional: Guardar el Gráfico ---
# ggsave("grafico_evolucion_homicidios_solo.png", plot = p_homicidios_solo, width = 8, height = 6, dpi = 300)
# cat("\nGráfico guardado como 'grafico_evolucion_homicidios_solo.png'.\n")
# --- 1. Cargar Librerías Necesarias ---
library(ggplot2)
library(tidyr) # Para pivot_longer
library(dplyr) # Para manipulación de datos
# --- 2. Preparar los Datos para el Gráfico ---
# 'tabla_final_pivotada_tipo' está en formato "ancho".
# Vamos a transformarla a formato "largo" para ggplot2.
tabla_grafico_tipo_largo <- tabla_final_pivotada_tipo %>%
pivot_longer(
cols = -tipo, # Selecciona todas las columnas excepto 'tipo'
names_to = "año",    # Los nombres de las columnas pivotadas (los años) irán a la nueva columna 'año'
values_to = "conteo_delitos" # Los valores (los conteos) irán a la nueva columna 'conteo_delitos'
) %>%
mutate(
año = as.numeric(as.character(año)) # Convertir el año de nuevo a numérico para el eje X
)
# --- 3. Crear el Gráfico de Líneas ---
p_delitos_por_tipo_lineas <- ggplot(tabla_grafico_tipo_largo, aes(x = año, y = conteo_delitos, color = tipo, group = tipo)) +
geom_line(linewidth = 1) + # Dibuja las líneas
geom_point(size = 2) +     # Añade puntos en cada año para mayor claridad
labs(
title = "Evolución Anual de Delitos por Tipo en CABA (2019-2023)",
x = "Año",
y = "Número de Delitos",
color = "Tipo de Delito",
caption = "Fuente: Datos de Delitos CABA"
) +
scale_x_continuous(breaks = unique(tabla_grafico_tipo_largo$año)) + # Asegura que se muestren todos los años en el eje X
scale_y_continuous(labels = scales::comma) + # Formatea el eje Y con comas para miles
scale_color_manual(values = c(
"Homicidios" = "#d95f02", # Naranja quemado
"Hurto" = "#7570b3",      # Púrpura suave
"Lesiones" = "#e7298a",   # Rosa oscuro
"Robo" = "#66a61e"        # Verde lima
)) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 11, face = "bold"),
legend.position = "right"
)
# Mostrar el gráfico
print(p_delitos_por_tipo_lineas)
# --- 4. Opcional: Guardar el Gráfico ---
ggsave("grafico_evolucion_delitos_tipo.png", plot = p_delitos_por_tipo_lineas, width = 12, height = 7, dpi = 300)
cat("\nGráfico guardado como 'grafico_evolucion_delitos_tipo.png'.\n")
# --- 1. Cargar Librerías Necesarias ---
library(ggplot2)
library(dplyr) # Para filtrar
# --- 2. Preparar los Datos para el Gráfico de Homicidios ---
# Filtrar solo los datos de Homicidios de la tabla larga ya generada
# (tabla_grafico_tipo_largo del código anterior).
# Si no tienes tabla_grafico_tipo_largo cargada, ejecuta primero el bloque "Preparar los Datos para el Gráfico" del mensaje anterior.
homicidios_para_grafico <- tabla_grafico_tipo_largo %>%
filter(tipo == "Homicidios")
# --- 3. Crear el Gráfico de Líneas Solo para Homicidios ---
p_homicidios_solo <- ggplot(homicidios_para_grafico, aes(x = año, y = conteo_delitos)) +
geom_line(color = "#d95f02", linewidth = 1.2) + # Color naranja quemado para Homicidios
geom_point(color = "#d95f02", size = 3) +       # Puntos más grandes para resaltar
geom_text(aes(label = conteo_delitos), vjust = -1, hjust = 0.5, size = 4, color = "#d95f02") + # Etiquetas con los valores exactos
labs(
title = "Evolución Anual de Homicidios en CABA (2019-2023)",
subtitle = "Foco en delitos de menor volumen",
x = "Año",
y = "Número de Homicidios",
caption = "Fuente: Datos de Delitos CABA"
) +
scale_x_continuous(breaks = unique(homicidios_para_grafico$año)) + # Asegura todos los años
scale_y_continuous(limits = c(0, max(homicidios_para_grafico$conteo_delitos) * 1.2), # Ajusta el límite Y para dejar espacio para etiquetas
labels = scales::comma) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 12, color = "gray30"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.position = "none" # No necesitamos leyenda si es un solo tipo
)
# Mostrar el gráfico
print(p_homicidios_solo)
# --- 4. Opcional: Guardar el Gráfico ---
ggsave("grafico_evolucion_homicidios_solo.png", plot = p_homicidios_solo, width = 8, height = 6, dpi = 300)
cat("\nGráfico guardado como 'grafico_evolucion_homicidios_solo.png'.\n")
View(delitos_todos_anios)
# --- 0. Configuración Inicial (Opcional, si no lo hiciste antes) ---
# rm(list = ls()) # Limpia el entorno de trabajo
# options(scipen = 999) # Evita la notación científica
# --- 1. Cargar Librerías Necesarias ---
library(dplyr)   # Para manipulación de datos
library(tidyr)   # Para pivot_longer, pivot_wider
library(ggplot2) # Para la creación de gráficos
library(scales)  # Para formatear etiquetas de ejes
# --- 2. Definir Años y Nombres de Tablas de Delitos ---
años_a_procesar <- 2019:2023
# --- 3. Inicializar lista para almacenar los resúmenes de uso de arma ---
listado_delitos_uso_arma <- list()
# --- 4. Bucle para procesar cada año y generar el resumen de uso de arma ---
cat("Iniciando la generación de datos para gráficos de uso de arma...\n")
for (año_actual in años_a_procesar) {
cat(paste0("  Procesando año: ", año_actual, " para uso_arma...\n"))
nombre_tabla_delitos <- paste0("delitos_limpios_", año_actual)
# Verificar si la tabla existe en el entorno
if (!exists(nombre_tabla_delitos)) {
warning(paste0("La tabla '", nombre_tabla_delitos, "' no se encontró en el entorno. Saltando este año."))
next
}
# Obtener el data frame de delitos para el año actual
delitos_año_actual <- get(nombre_tabla_delitos)
# --- Limpieza y preparación de la columna 'uso_arma' ---
delitos_año_actual_limpio_arma <- delitos_año_actual %>%
mutate(
uso_arma = as.character(uso_arma) # Asegurar que sea tipo caracter
) %>%
filter(!is.na(uso_arma) & uso_arma %in% c("SI", "NO")) # Filtrar NAs y asegurar solo SI/NO
# --- Resumen de uso de arma para el año actual ---
resumen_uso_arma <- delitos_año_actual_limpio_arma %>%
group_by(uso_arma) %>%
summarise(
conteo_delitos = n()
) %>%
mutate(
año = año_actual # Añadir la columna de año
) %>%
ungroup()
listado_delitos_uso_arma[[as.character(año_actual)]] <- resumen_uso_arma
}
# --- 5. Combinar los resúmenes de uso de arma de todos los años ---
tabla_delitos_por_uso_arma <- bind_rows(listado_delitos_uso_arma) %>%
select(año, uso_arma, conteo_delitos) %>%
arrange(año, uso_arma)
cat("\n¡Datos de uso de arma procesados y combinados!\n")
# --- 1. Preparar los Datos para el Gráfico de Conteo de Uso de Arma ---
# Filtrar solo los casos donde uso_arma es "SI"
delitos_con_arma_conteo <- tabla_delitos_por_uso_arma %>%
filter(uso_arma == "SI") %>%
mutate(año = as.numeric(as.character(año))) # Asegurar año como numérico para el eje X
# --- 2. Crear el Gráfico de Líneas para Conteo de Delitos con Armas ---
cat("\nGenerando Gráfico 1: Evolución Anual de Delitos con Armas (Conteo)...\n")
p_conteo_uso_arma <- ggplot(delitos_con_arma_conteo, aes(x = año, y = conteo_delitos)) +
geom_line(color = "#1f77b4", linewidth = 1.2) + # Un color azul
geom_point(color = "#1f77b4", size = 3) +
geom_text(aes(label = scales::comma(conteo_delitos)), vjust = -1, hjust = 0.5, size = 4, color = "#1f77b4") + # Etiquetas de conteo
labs(
title = "Evolución Anual de Delitos con Uso de Arma en CABA (2019-2023)",
x = "Año",
y = "Número de Delitos con Arma",
caption = "Fuente: Datos de Delitos CABA"
) +
scale_x_continuous(breaks = unique(delitos_con_arma_conteo$año)) +
scale_y_continuous(labels = scales::comma) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
)
# Mostrar el gráfico
print(p_conteo_uso_arma)
# --- 3. Opcional: Guardar el Gráfico ---
ggsave("grafico_evolucion_delitos_uso_arma_conteo.png", plot = p_conteo_uso_arma, width = 10, height = 7, dpi = 300)
cat("✔ Gráfico 'grafico_evolucion_delitos_uso_arma_conteo.png' guardado.\n")
# --- 1. Preparar los Datos para el Gráfico de Proporción de Uso de Arma ---
# Calcular el porcentaje para cada uso_arma (SI/NO) por año
delitos_uso_arma_proporcion <- tabla_delitos_por_uso_arma %>%
group_by(año) %>%
mutate(
total_anual = sum(conteo_delitos),
porcentaje = (conteo_delitos / total_anual) * 100
) %>%
ungroup() %>%
mutate(
año = as.factor(año), # Convertir año a factor para el eje X
uso_arma = factor(uso_arma, levels = c("NO", "SI")) # Ordenar las etiquetas
) %>%
arrange(año, uso_arma)
# --- 2. Crear el Gráfico de Barras Apiladas con Porcentaje de Uso de Arma ---
cat("\nGenerando Gráfico 2: Proporción Anual de Delitos con Armas (Porcentaje)...\n")
p_proporcion_uso_arma <- ggplot(delitos_uso_arma_proporcion, aes(x = año, y = porcentaje, fill = uso_arma)) +
geom_bar(stat = "identity", position = "stack") +
labs(
title = "Proporción de Delitos con/sin Uso de Arma por Año (2019-2023)",
x = "Año",
y = "Porcentaje de Delitos (%)",
fill = "Uso de Arma",
caption = "Fuente: Datos de Delitos CABA"
) +
scale_fill_manual(values = c(
"SI" = "#d62728", # Rojo para "SI"
"NO" = "#2ca02c"  # Verde para "NO"
)) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) + # Eje Y en formato porcentaje
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 11, face = "bold"),
legend.position = "right"
)
# Mostrar el gráfico
print(p_proporcion_uso_arma)
# --- 3. Opcional: Guardar el Gráfico ---
ggsave("grafico_proporcion_delitos_uso_arma.png", plot = p_proporcion_uso_arma, width = 10, height = 7, dpi = 300)
cat("✔ Gráfico 'grafico_proporcion_delitos_uso_arma.png' guardado.\n")
cat("\n¡Generación de gráficos de uso de arma completada!\n")
View(delitos_limpios_2023)
View(delitos_limpios_2021)
# --- 0. Configuración Inicial (Opcional, si no lo hiciste antes) ---
# rm(list = ls()) # Limpia el entorno de trabajo
# options(scipen = 999) # Evita la notación científica
# --- 1. Cargar Librerías Necesarias ---
library(dplyr)   # Para manipulación de datos
library(tidyr)   # Para pivot_longer, pivot_wider (si se necesitan)
library(ggplot2) # Para visualización (aunque aquí solo generamos tablas)
library(lubridate) # Para manejar fechas y extraer el día de la semana
# --- 2. Consolidar todos los data frames anuales en uno solo ---
cat("Consolidando todos los data frames de delitos limpios...\n")
# Lista de nombres de tus data frames anuales
nombres_tablas_delitos <- paste0("delitos_limpios_", 2019:2023)
# Inicializar una lista para almacenar los data frames
lista_delitos_consolidados <- list()
for (nombre_tabla in nombres_tablas_delitos) {
if (exists(nombre_tabla) && is.data.frame(get(nombre_tabla))) {
# Asegurarse de que 'fecha' sea tipo Date para lubridate
df_temp <- get(nombre_tabla) %>%
mutate(fecha = as.Date(fecha)) # Convertir a formato de fecha
lista_delitos_consolidados[[nombre_tabla]] <- df_temp
} else {
warning(paste0("El objeto '", nombre_tabla, "' no es un data frame o no existe. Será omitido."))
}
}
# Combinar todos los data frames en uno solo
delitos_consolidado_total <- bind_rows(lista_delitos_consolidados)
cat("✔ Data frame consolidado creado: 'delitos_consolidado_total'.\n")
# --- 3. Calcular Información Relevante ---
# 3.1 Promedio Diario de Delitos (General y por Año)
cat("\n--- Calculando Promedio Diario de Delitos ---\n")
# Calcular el número de días únicos por año
dias_por_año <- delitos_consolidado_total %>%
mutate(año = year(fecha)) %>% # Extraer el año de la fecha
distinct(año, fecha) %>%     # Obtener fechas únicas por año
group_by(año) %>%
summarise(
total_dias = n()
) %>%
ungroup()
# Conteo de delitos por año
conteo_delitos_por_año <- delitos_consolidado_total %>%
mutate(año = year(fecha)) %>%
group_by(año) %>%
summarise(
total_delitos = n()
) %>%
ungroup()
# Unir y calcular el promedio diario
promedio_diario_delitos_anual <- left_join(conteo_delitos_por_año, dias_por_año, by = "año") %>%
mutate(
promedio_diario = total_delitos / total_dias
) %>%
select(año, total_delitos, total_dias, promedio_diario)
cat("\n### Promedio Diario de Delitos por Año:\n")
print(promedio_diario_delitos_anual)
# Promedio diario total (general)
total_dias_observados <- n_distinct(delitos_consolidado_total$fecha)
total_delitos_observados <- nrow(delitos_consolidado_total)
promedio_diario_general <- total_delitos_observados / total_dias_observados
cat(paste0("\n### Promedio Diario General de Delitos (2019-2023): ", round(promedio_diario_general, 2), " delitos/día\n"))
# 3.2 Delitos por Barrio (Top N y Bottom N)
cat("\n--- Calculando Delitos por Barrio ---\n")
# Filtrar NAs en la columna 'barrio' antes de agrupar
delitos_por_barrio <- delitos_consolidado_total %>%
filter(!is.na(barrio) & barrio != "") %>% # Eliminar NAs y cadenas vacías
group_by(barrio) %>%
summarise(
conteo_delitos = n()
) %>%
ungroup() %>%
arrange(desc(conteo_delitos)) # Ordenar de mayor a menor
cat("\n### Top 10 Barrios con Más Delitos (2019-2023):\n")
print(head(delitos_por_barrio, 10))
cat("\n### Top 10 Barrios con Menos Delitos (2019-2023):\n")
print(tail(delitos_por_barrio, 10))
# 3.3 Delitos por Comuna (Top N y Bottom N)
# Asumiendo que tienes una columna 'comuna'
cat("\n--- Calculando Delitos por Comuna ---\n")
if ("comuna" %in% colnames(delitos_consolidado_total)) {
delitos_por_comuna <- delitos_consolidado_total %>%
filter(!is.na(comuna) & comuna != "") %>% # Limpiar NAs/vacíos
group_by(comuna) %>%
summarise(
conteo_delitos = n()
) %>%
ungroup() %>%
arrange(desc(conteo_delitos))
cat("\n### Top 5 Comunas con Más Delitos (2019-2023):\n")
print(head(delitos_por_comuna, 5))
cat("\n### Top 5 Comunas con Menos Delitos (2019-2023):\n")
print(tail(delitos_por_comuna, 5))
} else {
cat("Advertencia: No se encontró la columna 'comuna' en los datos consolidados. Saltando análisis por Comuna.\n")
}
# 3.4 Delitos por Día de la Semana
cat("\n--- Calculando Delitos por Día de la Semana ---\n")
delitos_por_dia_semana <- delitos_consolidado_total %>%
mutate(
dia_semana = wday(fecha, label = TRUE, abbr = FALSE, locale = "es_AR") # Nombre completo del día de la semana en español
) %>%
filter(!is.na(dia_semana)) %>% # Limpiar NAs si los hubiera
group_by(dia_semana) %>%
summarise(
conteo_delitos = n()
) %>%
ungroup() %>%
# Asegurar el orden correcto de los días de la semana
mutate(dia_semana = factor(dia_semana, levels = c(
"lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"
))) %>%
arrange(dia_semana)
View(delitos_consolidado_total)
View(promedio_diario_delitos_anual)
# --- 0. Asegúrate de tener los datos preparados ---
# Si no has ejecutado el script anterior que genera 'delitos_por_barrio',
# deberías ejecutarlo primero para que este objeto esté en tu entorno.
# La tabla 'delitos_por_barrio' debería lucir así:
#    barrio          conteo_delitos
#    <chr>                    <int>
#  1 Palermo                  XXXXX
#  2 Balvanera                YYYYY
#  3 ...
# --- 1. Cargar Librerías Necesarias ---
library(ggplot2) # Para la creación de gráficos
library(dplyr)   # Para manipulación de datos (head, filter)
library(scales)  # Para formatear los números del eje (comas en miles)
# --- 2. Preparar los Datos para el Gráfico ---
# Seleccionar los top 10 barrios de la tabla 'delitos_por_barrio'
# Asegurarse de que 'barrio' sea un factor y reordenarlo por conteo_delitos
# para que las barras aparezcan en orden descendente en el gráfico.
top_10_barrios <- delitos_por_barrio %>%
head(10) %>% # Selecciona las primeras 10 filas (que ya están ordenadas por conteo_delitos)
mutate(barrio = factor(barrio, levels = rev(barrio))) # Convierte a factor y revierte el orden
# para que la barra más larga esté arriba.
# --- 3. Crear el Gráfico de Barras ---
cat("\nGenerando Gráfico: Top 10 Barrios con Más Delitos...\n")
p_top_10_barrios <- ggplot(top_10_barrios, aes(x = conteo_delitos, y = barrio)) +
geom_bar(stat = "identity", fill = "#5B9BD5") + # Barras horizontales, color azul claro
geom_text(aes(label = scales::comma(conteo_delitos)), # Etiquetas con conteo exacto
hjust = -0.1, # Ajusta posición de la etiqueta (un poco a la derecha de la barra)
size = 3.5,
color = "black") +
labs(
title = "Top 10 Barrios con Mayor Cantidad de Delitos Registrados (2019-2023)",
x = "Número de Delitos",
y = "Barrio",
caption = "Fuente: Datos de Delitos CABA"
) +
scale_x_continuous(labels = scales::comma, # Formato de miles en el eje X
expand = expansion(mult = c(0, 0.15))) + # Expande el eje X para las etiquetas
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
axis.title.x = element_text(size = 11, face = "bold"),
axis.title.y = element_text(size = 11, face = "bold"),
panel.grid.major.y = element_blank(), # Elimina líneas de grilla horizontales
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey80", linetype = "dashed"), # Mantén líneas verticales suaves
plot.caption = element_text(hjust = 1, size = 9, color = "grey50")
)
# Mostrar el gráfico
print(p_top_10_barrios)
# --- 4. Opcional: Guardar el Gráfico ---
ggsave("grafico_top_10_barrios.png", plot = p_top_10_barrios, width = 10, height = 7, dpi = 300)
cat("✔ Gráfico 'grafico_top_10_barrios.png' guardado.\n")
